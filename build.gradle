plugins {
    id 'java'
    id 'maven-publish'
    id 'jacoco'
    id 'io.freefair.lombok' version '8.13.1'
    id 'org.sonarqube' version '6.1.0.5360'
}

allprojects {
    apply from: "$rootProject.projectDir/dependencies.gradle"
    
    group 'com.triviuminds.dmn'
    version '1.0.0-SNAPSHOT'

    repositories {
        maven {
            url "https://repo1.maven.org/maven2/"
        }
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    apply plugin: 'org.sonarqube'
    apply plugin: 'io.freefair.lombok'

    jar {
        manifest {
            attributes(
                'Implementation-Title': rootProject.name-project.name,
                'Implementation-Version': version,
                'Organization': 'organization',
            )
        }
        archiveBaseName.set("${rootProject.name}-${project.name}")
        archiveVersion.set(version)
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId = 'com.triviuminds.dmn'
                artifactId = "${rootProject.name}-${project.name}"
                artifact jar
            }
        }
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport // report is always generated after tests run
        jacoco {
            excludes = ['**/domain/**', '**/model/**', '**/enums/**', '**/config/**', '**/constants/**']
        }
    }

    jacocoTestReport {
        dependsOn jacocoTestCoverageVerification // report is always generated after tests run
        executionData.from = files("$project.buildDir/jacoco/test.exec")
        reports {
            xml.required = true
            html.required = true
        }
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                element = 'CLASS'
                excludes = ['**/domain/**', '**/model/**', '**/enums/**', '**/config/**', '**/constants/**', '**/entity/**', '**/generated/**', '**/test/**']
                /*
                limit {
                    minimum = 0.85
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                }
                */
            }
        }
    }

    sonar {
        properties {
            property 'sonar.coverage.jacoco.xmlReportPaths', "$projectDir.parentFile.path/build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
        }
    }
}

apply from: "$project.rootDir/sonar.gradle"

tasks.register("codeCoverageReport", JacocoReport) {
  subprojects {subproject ->
      subproject.plugins.withType(JacocoPlugin).configureEach {
          subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension)}).configureEach { testTask ->
              if(testTask.extensions.getByType(JacocoTaskExtension).isEnabled()) {
                  sourceSets subproject.sourceSets.main
                  executionData(testTask)
              } else {
                    logger.warn("Jacoco is not enabled for task ${testTask.name} in project ${subproject.name}. This subproject will not be included in the code coverage report.")
              }
          }
          subproject.tasks.matching({t -> t.extensions.findByType(JacocoTaskExtension)}).forEach {
              rootProject.tasks.codeCoverageReport.dependsOn(it)
          }
      }
    }
    reports {
        xml.required = true
        html.required = true
    }
}

build {
    dependsOn codeCoverageReport
    doLast {
        println("move all the module jars to the top folder")
        delete("$rootDir/build/libs/${project.name}-${version}.jar")
        copy {
            from subprojects.collect { it.tasks.jar.archiveFile }
            into "$rootDir/build/libs"
        }
    }
}

